This file will define the technical spec in broad terms.

Objects
=======
(every object has '_id' and 'created_at' fields)

* Users (defined in usrs.rb file and $users collection)
Each user will have:
- email
- name 
- pic_url 
- fb_id  =
- token (to be created upon user creation)    

* Info Requests
- user_id (requesting user)
***
- text (description)
either
- location (*optionаl* - )
or
- lat (latitude coordinates) (*optionаl*)
- long (longitude coordinates) (*optionаl*)
****
- medium (text, image, video)
- amount (of money for response)
- status ('Open', 'Fulfilled', etc)
- is_private (false by default) 

* Responses
- request_id 
- user_id (responding user)
- text
- lat (latitude coordinates) (*optionаl*)
- long (longitude coordinates) (*optionаl*)
- Location  (*optionаl*)
- photos_arr (array of urls)
- videos_arr (array of urls) 

* Ratings 
- user_id (rating user)
- rating 
- rated_user_id
- response_id 

* Payments ====missing====
- user_id (paying user)
- request_id
- amount 
- paid_user_id
- confirmed_paid_at
- transaction_id 

* Flags 
- flagging_user_id
- flagged_user_id
- request_id/response_id 

* Confirm-Refute
- response_id
- user_id
- action (confirm/refute/null)

* Comments
- response_id
- user_id
- text

End-Points
==========

* Users
- /login (with FB) (expects fb token, return user + flag if is new user)
- /user_data (expects user_id, returns a hash with email, name, pic_url, paypal
- /update_me (expects one(or more) of the following and sets it: [paypal, email, pic_url, name.])
- /activity_data  (expects user_id,
returns of activity_data:
  - num_requests_made
  - num_responses
  - num_requests_marked_as_fulfilled
  - num_paid_requests_marked_as_fulfilled
  - num_actual_paid
  - average rating

* Info Requests
- /add_request (expects user_id (current user), 
posts params from Info Requests collection(mandatory and optional))
returns added object .
- /get_requests  (will show of different types by imput param (e.g logitude and latitude will return local requests)
  - expects one of the following as criteria: _id, user_id, text, lat & long, amount, responder_id
  - returns an array of requests
    - each request has all data necessary to display 
  
* Responses 
- /add_response (expects user_id (current user), 
posts params from * Responses collection(mandatory and optional)). returns added object 
- /get_responses
  - expects one of the following as criteria: _id, user_id, request_id, text
  - returns an array of responses
    - each response has all data necessary to display it 
- /confirm_refute (confirm or refute response)
(expects user_id, id of response and action (confirm/refute), returns added object 

* Ratings 
- /add_rating (expects rated_user_id, rating(1 to 5), response_id). returns added object 
- get_ratings 
  - expects user_id or rated_user_id
  - returns an array of rating objects

* Payments  ====missing====
- /prepare_payment_page
 - expects request_id 
 - returns URL of Paypal page ready for payment + pay-key (Paypal identifier for payment)
- /confirm_payment 
 - expects payment identifier (string), returns hash indicating confirmed payment status 

 * Flags
-/flag_user (expects  cuid, flagged_user_id, request_id/response_id, returns new object flag added)
-/unflag_user (expects  cuid, flagged_user_id, request_id/response_id, returns - flag removed)
-/flags (expects one or more of the following: flagging_user_id, flagged_user_id, request_id/response_id, returns found objects)

 * Comments
-/add_comment (expects user_id, response_id; returns object comment)
-/remove comment (expects user_id, comment_id; returns "comment removed")
-/edit_comment (expects user_id, comment_id; returns object comment)


 * Admin ====missing====
 - /block_account (add {blocked: true} to user hash) - check for block in require user, if blocked, return message "you were blocked".
also "you were blocked" when trying to sign in

 - /unblock_account
 - /show_contact_us (see messages users sent on contact us form)

* Other
- contact_us (recieves submitted form data, saves it to database)
